#!/usr/bin/env python

PACKAGE='ic_barcode_scanner'

from dynamic_reconfigure.parameter_generator_catkin import *
from ic_barcode_scanner.msg import IcBarcodeResult

gen = ParameterGenerator()

# 1D Barcodes
barcode1d = gen.add_group("Barcodes 1D")

barcode1d.add("EAN_8", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_EAN_8 , "An EAN-8 is a barcode and is derived from the longer European Article Number (EAN-13) code. It was introduced for use on small packages where an EAN-13 barcode would be too large; for example on cigarettes, pencils (though it's not commonly used for pencils) and chewing gum packets.", True)

barcode1d.add("EAN_13", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_EAN_13 , "An EAN-13 barcode (originally European Article Number) is a barcoding standard which is a superset of the original 12-digit Universal Product Code (UPC) system developed in the United States. The EAN-13 barcode is defined by the standards organisation GS1.", True)

barcode1d.add("CODE39", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_CODE_39 , "Code 39 (also known as 'USS Code 39', 'Code 3/9', 'Code 3 of 9', 'USD-3', 'Alpha39', 'Type 39') is a barcode symbology that can encode uppercase letters (A through Z), digits (0 through 9) and a handful of special characters like the $ sign.", True)

barcode1d.add("CODE93", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_CODE_93 , "Code 93 is a barcode symbology designed in 1982 by Intermec to provide a higher density and data security enhancement to Code 39. It is an alphanumeric, variable length symbology. Code 93 is used primarily by Canada Post to encode supplementary delivery information. Every symbol includes two check characters.", True)

barcode1d.add("CODE128", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_CODE_128 , "Code 128 is a very high-density barcode symbology. It is used for alphanumeric or numeric-only barcodes. It can encode all 128 characters of ASCII and, by use of an extension character (FNC4), the Latin-1 characters defined in ISO/IEC 8859-1.", True)

barcode1d.add("UPC_A", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_UPC_A , "The Universal Product Code (UPC) is a barcode symbology, that is widely used in the United States and Canada for tracking trade items in stores. UPC in its most common usage technically refers to UPC-A.", True)

barcode1d.add("UPC_E", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_UPC_E , "To allow the use of UPC barcodes on smaller packages where a full 12-digit barcode may not fit, a 'zero-compressed' version of UPC was developed called UPC-E. This symbology differs from UPC-A in that it only uses a 6-digit code, does not use middle guard bars, and the end bit pattern (E) becomes 010101.", True)

barcode1d.add("UPC_EAN_EXT", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_UPC_EAN_EXTENSION , "UPC-A, UPC-E, and EAN-13 can all have an additional barcode located to the right of the main barcode that contains additional information. This second barcode is normally not as tall as the primary barcode and can encode either two or five additional digits.", True)

barcode1d.add("INTERLEAVED_2_OF_5", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_INTERLEAVED_2_OF_5 , "Interleaved 2 of 5 is a continuous two-width barcode symbology encoding digits. It is used commercially on 135 film and on cartons of some products, while the products inside are labeled with UPC or EAN.", True)

# 2D Barcodes
barcode2d = gen.add_group("Barcodes 2D")

barcode2d.add("AZTEC", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_AZTEC , "Aztec Code is a two-dimensional matrix symbology containing dark and light square data modules. It has a finder pattern of concentric square rings centered on a single dark module located in the center of the symbol.", True)

barcode2d.add("DATA_MATRIX", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_DATA_MATRIX , "Data Matrix is a two-dimensional matrix symbology containing dark and light square data modules. It has a finder pattern of two solid lines and two alternating dark and light lines on the perimeter of the symbol. Data Matrix is used for small item marking applications using a wide variety of printing and marking technologies.", True)

barcode2d.add("QR_CODE", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_QR_CODE , "QR Code is a two-dimensional matrix symbology containing dark and light square data modules. It has position detection patterns on three of its four corners and features direct encodation of the Japanese Kana-Kanji character set.", True)

barcode2d.add("MAXICODE", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_MAXICODE, "MaxiCode is a two-dimensional matrix symbology containing a fixed number of dark and light hexagonal modules. The symbol is specified to be a fixed size. MaxiCode has a bulls-eye finder pattern in the center of the symbol.", True)

barcode2d.add("PDF417", bool_t, IcBarcodeResult.IC_BARCODEFORMAT_PDF_417 , "PDF417 is a stacked linear barcode symbol format used in a variety of applications, primarily transport, identification cards, and inventory management. PDF stands for Portable Data File. The 417 signifies that each pattern in the code consists of 4 bars and spaces, and that each pattern is 17 units long.", True)


# Scanner Parameters
#scanner = gen.add_group("Scanner Parameters")

#scanner.add("check_char", int_t, 0, "Enables or disables checksum calculation on 1d barcodes, that support an optional checksum( CODE39 and Interleaved 2 of 5). Default: -1(disabled)", -1, -1, 1)

#scanner.add("num_scanlines", int_t, 0, "Specifies the number of scanlines, that will be used for 1d barcode decoding. Default: -1(disabled)", -1, -1, 100)

#scanner.add("element_size_min", int_t, 0, "Specifies the minimum element size, e.g. the minimum with of bars and spaces. The value is defined in pixels * 10. Default: -1(disabled)", -1, -1, 20)

#scanner.add("element_size_max", int_t, 0, "Specifies the maximum element size, e.g. the maximum with of bars and spaces. The value is defined in pixels * 10. Default: -1(disabled) ", -1, -1, 600)

#scanner.add("orientation", int_t, 0, "Expected bar code orientation. A potential (candidate) bar code contains bars with similar orientation. The 'Orientation' and 'OrientationTolerance' parameters are used to specify the range. Default: -1(disabled)", -1, -90, 90)

#scanner.add("orientation_tol", int_t, 0, "Orientation tolerance. Please refer to the explanation of 'orientation' parameter for further information. Default: -1(disabled)", -1, -1, 90)

#scanner.add("stop_after_num_results", int_t, 0, "Number of successfully decoded barcodes after which the decoding will stop. If this parameter is not set(has a value of -1), all barcode candidates are decoded. Default: -1(disabled)", -1, -1, 100)

#scanner.add("timeout", int_t, 0, "Time period in millisecs, after after 'tis_findbarcode' is interupted. The accuracy is about 100ms. Default: -1(disabled)", -1, -1, 1000)

#scanner.add("min_width", int_t, 0, "Minimum width of a barcode candidate in pixels. Default: -1(disabled)", -1, -1, 200)

#scanner.add("min_height", int_t, 0, "Minimum height of a barcode candidate in pixels. Default: -1(disabled)", -1, -1, 200)

#scanner.add("max_width", int_t, 0, "Maximum width of a barcode candidate in pixels. Default: -1(disabled)", -1, -1, 2000)

#scanner.add("max_height", int_t, 0, "Maximum height of a barcode candidate in pixels. Default: -1(disabled)", -1, -1, 2000)

#scanner.add("preprocess", int_t, 0, "IC_BARCODEPARAMS_PREPROCESS", -1, -1, 1)

#scanner.add("try_harder", int_t, 0, "IC_BARCODEPARAMS_TRY_HARDER", -1, -1, 1)

#scanner.add("ic_only", int_t, 0, "IC_BARCODEPARAMS_IC_ONLY", -1, -1, 1)

#scanner.add("fixed_data_length", int_t, 0, "IC_BARCODEPARAMS_FIXED_DATA_LENGTH", -1, -1, 1)

#scanner.add("store_debug_info", int_t, 0, "IC_BARCODEPARAMS_STORE_DEBUG_INFO", -1, -1, 1)

#scanner.add("use_multithreading", int_t, 0, "IC_BARCODEPARAMS_USE_MULTITHREADING", -1, -1, 1)


exit(gen.generate(PACKAGE, "IcBarcodeScanner", "IcBarcode"))
